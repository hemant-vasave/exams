**App.js**
-------------------------
 
<BrowserRouter>
 
/* Render the Navbar
 
<NavBar/> --- syntax if not given
 
<Routes>
 
	<Route path="/" element={<Exercises/>}/>
 
	<Route path="/boot_pt/:exerciseType" element={<BookPT/>}/>
 
	<Route path="*" element={<Exercises/>}/>
<Routes/>
 ____________________________________________________________________

**Exercises.js**
################
 
 const messages={
	NETWORK_ERROR: "Network Error",
};

 
/* To Be Implemented
/* This method fetches all the exercises from Url
 
const fetchAllLocations = async (e) => {
 
/*
1. Send an AXIOS GET request to the url and handle the success and error cases approp..
2. In case of success, assign received response's data to exercisesArray state state.
3. In case of error, set the errorMessage state as NETWORK_ERROR.
*/
 
try {
	const response = await axios.get(url);
	setExercisesArray(response.data);
 
}catch(error){
	setErrorMessage(messages.NETWORK_ERROR);
	}
 
};
 
/* This method navigates to BookPT component. */
 
const handleClick = (location) => {
 
/* 1. Navigate to BookPT component with route params as "exerciseArray" of the selected exercise.
Note : use the navigate method.
*/
 
	navigate(`/book-pt/${exercise.exerciseType}`);
 
}
 
/*This method iterates over the exercisesArray to display all the exercises cards. */
 
const displayLocations = () => {
 
let counter = 1000;
 
/* Start iteration over the exercisesArray state below comment block- and return a map function to iterate.
keep counter incrementation and below return() statement inside the iteration
*/
 
return(
	exercisesArray.map( (exercise) => {
 
counter++;
 
return (
 
<div className="col-md-3" key={counter}>
<div className="card shadow">

/* 1. set image source as imagePath.
   2. Set alternate text as id of exercise.
   3. Set class name as 'card-img-top'.
*/

<img
	data-testid={`imageT${counter}`} 
	style= {{ height: "200px" }}
	className="card-img-top"
	src= {excercise.imagePath}
	alt= {exercise.id}
/>

{/* Display the exerciseType of the exercise here.}
 
	{exercise.exerciseType}

{/* Display the exerciseType of the exercise here.}

	Price:{exercise.cost}$/month


{/* Invoke handleClickBooking method by passing proper exercise object when "Book Trainer" button is clicked */}

<button
	name="bookTrainer"
	className="btn btn-primary mt-2"
	style={{ marginRight: '5px' }}
	onClick={()=> handleClickBooking(exercise)}
> 
Book Trainer
<button/>

{/* Invoke handleClickShowBooking method by passing proper exercise object when "Show Booking" button is clicked */}

 <button
	name="bookTrainer"
	className="btn btn-primary mt-2"
	data-testid={`showButtonT${counter}`}
	onClick={ () => handleClickShowBooking(exercise)}
> 
Book Trainer
<button/>

); //End of return
/* Iteration should be ended here */

 }));  <- // (IMP: "brackets sequence to close iteration)
};

 
 //After scrolling down

<h2>
 {/* render Error message here. */}

	{errorMessage}
</h2>

<div>
{/* Invoke the displayExercises method*/}

	{displayExercises()}

</div>
_________________________________________________________________
 

***BookPT.js***
##################### 
 
// At the start:

export default function BookPT(){
	const params = useParams();

//always give error/validation messages like:-

	messages.REQUIRED_VALIDATION

 
const url = "http://localhost:4000/bookingsCollection/";
 
/* This function will be invoked whenever any change happens in any of the input field.
 
const handleChange = (event) => {
 
/* 1. should use the name and value from the event object.
   2. set formdata state property to the received value. 
   3. invoke the validateField by passing event object's name and 
      value as parameter
*/
 

const {name, value} = event.target;
setFormData((prevFormData) => ({...prevFormData, [name]: value }));
validateField(name, value);
 };
 

/*To be Modifoed*/
/*This Method validates the input fields based on mentioned conditions*/
 

Switch (fieldname) {
 
  case "name":

/*1. If value of name is empty.
  2. If value of name does not matches regex pattern.*/

const nameRegex = /^[A-Za-z][A-Za-z ]{3,29}$/;
 
if(fieldValue === ""){
 
  newFormDataErrorMessage.name = messages.REQUIRED_VALIDATION; 
  newFormDataValid.name = false;
 
}else if (nameRegex.test(fieldValue)){
 
newFormDataErrorMessage.name = messages.NAME_VALIDATION; 
newFormDataValid.name = false;
 
 }else {
 
newFormDataErrorMessage.name = '';
newFormDataValid.name = true;
 
}
 
break;
 
case "startDate":

/*1. If value of name is empty.
  2. If startDate/checkInDate has past or todays date.
*/

let today = already given*
let checkIn = already given
 
if(fieldValue === ""){
 
  newFormDataErrorMessage.startDate = messages.REQUIRED_VALIDATION;
  newFormDataValid.startDate = false;
}
 
else if(checkIn <= today){
 
  newFormDataErrorMessage.startDate = messages.DATE_VALIDATION;
  newFormDataValid.startDate = false;
 
}else{
 
newFormDataErrorMessage.startDate = '';
newFormDataValid.startDate = true;
}
 
break;
 
case "contactNo":
 
 //regex was not given so make it as follows:
 
const contactReg = /^[6-9][0-9]{9}$/;

if(fieldValue == ""){
 
newFormDataErrorMessage.contactNo = messages.REQUIRED_VALIDATION;
newFormDataValid.contactNo = false;
 
}else if (!contactReg.test(fieldValue)){
 
newFormDataErrorMessage.contactNo = messages.CONTACT_VALIDATION;
newFormDataValid.contactNo = false;
 
}else {
 
newFormDataErrorMessage.contactNo = ''; 
newFormDataValid.contactNo = true;
}
 
break;
default;
break;
}

/*Set isButtonActive to true when the when the associated formValid of all fields are true*/
 
if(newFormDataValid.name && newFormDataValid.contactNo && newFormDataValid.startDate) {
  newFormDataValid.ButtonActive =true;
} else{
newFormDataValid.buttonActive = false;
}

setFormErrorMessage(newFormDataErrorMessage)
setFormDataValid(newFormDataValid);
 };

/*to be modified*/
/*This method Save the booking form data*/

const submitVisit = async (event) => {
 
/*prevent default behaviour on form submission*/

event.preventDefault();
 
try {
	const response = await axios.post(url, formData);
	setSuccessMessage(messages.TRAINER_BOOKED_SECCESS);
	setErrorMessage("");
 
 }catch (error) {
 	setErrorMessage(messages.TRAINER_BOOKED_ERROR)
	setSuccessMessage(""); 
}
  
};
 
/*TO be modified*/
/* the below code designs registration form*/
 
return (
{/*Display selected Exercise Type*/}

	Book Your Training for:{params.exerciseType}

{/* input 1 - Do not Change*/}--- given for reference.
{/* input 2 - to be modified*/}

<inpute
	id = "name"
	type = "text"
	data-testid = "inputName" ---till given and below added as per conditions
	name = "name"
	value = {formData.name}
	onChange = {handleChange}
	className = "form-control"
/>
<div id = "nameError" data-testid="" className = "badge text-bg-danger">

{/*show name error message and style it with class "badge text-bg-danger"*/}

	{formErrorMessage.name}
</div>

{/*input 3 same as above just change names accordingly*/}

	type = "number" ---as instructed in comments

{/*input 4 same as above just change names accordingly*/}

	type = "date"  ---as instructed in comments

{/*Disable the button until the buttonActive state property is true*/}  ----was given in main intruction para.

<button 
	id="bookPTBtn"
	className = "btn btn-block btn-dark mt-3"
	disabled={!formDataValid.buttonActive}>
	Book PT
</button>
 

<div id="" data-testid="" className="badge text-bg-success">

  {/*Display success message and style it with class "badge text-bg-success"*/}

	{successMessage}
</div>

<div id="" data-testid="" className="badge text-bg-danger">

  {/*Display error message and style it with class "badge text-bg-danger" */}

	{errorMessage}
</div>




***********************************************
 
