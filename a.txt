
public Integer addCard(CardDTO cardDTO) throws EbankingException {
    // write your code here
    CardValidator.validate(cardDTO);
    Optional<Customer> optional = customerRepository.findById(cardDTO.getCustomerDTO().getCustomerId());
    Customer customer = optional.orElseThrow(() -> new EbankingException("Service.CUSTOMER_NOT_FOUND"));
    Card byCustomer = cardRepository.findByCustomer(customer);
    if (byCustomer != null) {
        throw new EbankingException("Service.CUSTOMER_CARD_EXIST");
    }
    Card card = CardDTO.prepareEntity(cardDTO);
    card.setCustomer(customer);
    if (card.getCardType().matches("platinum")) {
        card.setMinBalance(20000);
    } else
    if (card.getCardType().matches("gold")) {
        card.setMinBalance(15000);
    } else
    if (card.getCardType().matches("silver")) {
        card.setMinBalance(10000);
    }
    cardRepository.save(card);
    return card.getCardNo();
}


-------------------------------------
public List<CustomerDTO> getCustomersByCardType(String cardType) throws EbankingException {
    // write your code here
    List<Card> cardList = cardRepository.findByCardType(cardType);
    if (cardList.isEmpty()) {
        throw new EbankingException("Service.NO_CARDS_FOUND");
    }
    List<CustomerDTO> dtoList = new ArrayList<CustomerDTO>();
    for (Card c : cardList) {
        CustomerDTO custDTO = CustomerDTO.prepareDTO(c.getCustomer());
        dtoList.add(custDTO);
    }
    dtoList.sort((x, y) -> (x.getCustomerName().compareTo(y.getCustomerName())));
    return dtoList;
}
--------------------------------------
public void cancelCard(Integer cardNo) throws EbankingException {
    // write your code here
    Optional<Card> optional = cardRepository.findById(cardNo);
    Card card = optional.orElseThrow(() -> new EbankingException("Service.CARD_NOT_AVAILABLE"));
    LocalDate today = LocalDate.now();
    if (card.getExpiryDate().isEqual(today) || card.getExpiryDate().isBefore(today)) {
        card.setCustomer(null);
        cardRepository.delete(card);
    } else {
        throw new EbankingException("Service.CANNOT_CANCEL_CARD");
    }
}